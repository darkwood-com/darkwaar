service: darkwaar

provider:
  name: aws
  runtime: provided
  httpApi:
    # Enable CORS for our API, from all domains, so that it can be called from our frontend app
    # More details here: https://www.serverless.com/framework/docs/providers/aws/events/http-api/
    cors: true
  environment:
    # Environment variables for Laravel
    APP_ENV: production
    APP_DEBUG: true # switch to false for production
    # Bref needs to know that the vendor directory is inside "api/"
    BREF_AUTOLOAD_PATH: api/vendor/autoload.php

functions:
  api:
    handler: api/public/index.php
    timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
    layers:
      - ${bref:layer.php-74-fpm}
    events:
      - httpApi: '*'

package:
  # Files/directories to exclude from deployment on Lambda
  exclude:
    # We do not want to deploy the frontend to AWS Lambda
    - front/**
    # Exclude some Laravel directories from deployment
    - api/node_modules/**
    - api/public/storage
    - api/storage/**

plugins:
  # We need to include the Bref plugin
  - ./api/vendor/bref/bref

resources:
  Resources:

    # The S3 bucket that stores the static website
    StaticWebsite:
      Type: AWS::S3::Bucket
      # We do not define a `BucketName` property, a random name will be generated
      Properties:
        WebsiteConfiguration:
          # Redirect all pages to index.html
          IndexDocument: 'index.html'
          ErrorDocument: 'index.html'

    # The policy that makes the bucket publicly readable
    StaticWebsitePolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref StaticWebsite # References the bucket we defined above
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*' # everyone
              Action: s3:GetObject # to read
              Resource: !Join ['/', [!GetAtt StaticWebsite.Arn, '*']] # things in the bucket

    WebsiteCDN:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          # Cheapest option by default (https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_DistributionConfig.html)
          PriceClass: PriceClass_100
          # Enable http2 transfer for better performances
          HttpVersion: http2
          # Origins are where CloudFront fetches content
          Origins:
            - Id: StaticWebsite
              DomainName: !Select [2, !Split ["/", !GetAtt StaticWebsite.WebsiteURL]]
              CustomOriginConfig:
                # S3 websites only support HTTP
                # (this is only accessed by CloudFront, visitors will be using HTTPS)
                OriginProtocolPolicy: 'http-only'
          DefaultCacheBehavior:
            TargetOriginId: StaticWebsite
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              # Do not forward the query string or cookies
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
          # When using a custom domain, uncomment the configuration below:
          #Aliases:
          #    - example.com # our custom domain
          #    # It is also possible to add multiple domain names for the same website
          #ViewerCertificate:
          #    # ARN of the certificate created in ACM
          #    # The ARN should look like this: 'arn:aws:acm:us-east-1:116536346254:certificate/322f12ee-1165-4bfa-a41f-08c932a2935d'
          #    AcmCertificateArn: <certificate-arn>
          #    # See https://docs.aws.amazon.com/fr_fr/cloudfront/latest/APIReference/API_ViewerCertificate.html
          #    SslSupportMethod: 'sni-only'
          #    MinimumProtocolVersion: TLSv1.1_2016

  Outputs:
    StaticWebsiteBucket:
      Description: Name of the bucket that stores the static website.
      Value: !Ref StaticWebsite
    CloudFrontDomain:
      Description: CloudFront domain name.
      Value: !GetAtt WebsiteCDN.DomainName
